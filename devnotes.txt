Store:

boards: {
  state: {
    entities: {},
  },
  actions: {
    /* No such thing like "currentBoard" */
    fetchAllBoards(),  // Thunk (calls boardsAdded)
    createBoard(),  // Thunk (calls boardsAdded)
    boardsAdded(),
    updateBoard(),  // Thunk (calls boardUpdated)
    boardUpdated(),
    fetchSomeBoardColumnCards()  // Thunk (calls boardUpdated)
    lfetchCardData(),   // Thunk (calls loadSomeCardComments)
    fetchSomeCardComments()  // Thunk (calls boardUpdated)
    addCard(),  // Thunk (calls boardUpdated)
    updateCard(), // Thunk (calls boardUpdated)
    addComment(), // Thunk (calls boardUpdated)
    updateComment(), // Thunk (calls boardUpdated)
  }
}
users: {
  state: {
    entities: {}
  },
  actions: {
    addUser(),  // Thunk (calls usersAdded)
    usersAdded(),
    fetchUsers(),  // Thunk (calls usersAdded)
    updateUser(), // Thunk (calls userUpdated)
    userUpdated(),
    clearUsers(),
    deactivateUser()  // Thunk (calls clearUsers and usersAdded)
  }
}

// todo: state selectors

possible fetching statuses:
- not started at all
- in progress
- success
- failed
- success, but in a situation we might want to refetch ("needs refetch")

IMPORTANT: slices.extraReducers offers a way to handle thunks' pending/fullfilled/rejected actions, as if they were new actions