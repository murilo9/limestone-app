Store:

common: {
  state: {
    currentUser: null | User
  }
  actions: {
    fetchMe(),   // Thunk (sets currentUser
    clearCurrentUser()
  }
}
boards: {
  state: {
    entities: {},
  },
  actions: {
    /* No such thing like "currentBoard" */
    loadAllBoards(),  // Thunk
    onCreateBoard(),  // Thunk
    upsertBoards(),
    onUpdateBoard(),  // Thunk
    onDeleteBoard(),  // Thunk
    fetchSomeBoardColumnCards()  // Thunk
    fetchCardData(),   // Thunk
    fetchSomeCardComments()  // Thunk
    addCard(),  // Thunk
    updateCard(), // Thunk
    addComment(), // Thunk
    updateComment(), // Thunk
  }
}
users: {
  state: {
    entities: {}
  },
  actions: {
    addUser(),  // Thunk (calls usersAdded)
    usersAdded(),
    fetchUsers(),  // Thunk (calls usersAdded)
    updateUser(), // Thunk (calls userUpdated)
    userUpdated(),
    clearUsers(),
    deactivateUser()  // Thunk (calls clearUsers and usersAdded)
  }
}

// todo: state selectors

possible fetching statuses:
- not started at all
- in progress
- success
- failed
- success, but in a situation we might want to refetch ("needs refetch")

IMPORTANT: slices.extraReducers offers a way to handle thunks' pending/fullfilled/rejected actions, as if they were new actions